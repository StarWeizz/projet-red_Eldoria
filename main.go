package main

import (
	"log"
	"os"
	"os/exec"

	"eldoria/game"

	"github.com/gdamore/tcell/v2"
)

func main() {
	// Initialiser l'√©cran
	screen, err := tcell.NewScreen()
	if err != nil {
		log.Fatalf("%+v", err)
	}
	if err := screen.Init(); err != nil {
		log.Fatalf("%+v", err)
	}
	defer screen.Fini()

	// Cr√©er le personnage via l'intro
	playerCharacter := game.ShowIntroAndCreateCharacter(screen)

	// Cr√©er l'√©tat du jeu
	gameState := game.NewGameState(screen, playerCharacter)

	// Charger les mondes
	gameState.LoadWorlds()

	// Initialiser le joueur
	gameState.InitializePlayer()

	// D√©marrer le syst√®me de respawn
	respawnTicker := gameState.StartRespawnChecker()
	defer respawnTicker.Stop()

	// Dessiner l'√©tat initial
	gameState.Draw()

	// Boucle principale du jeu
	for {
		ev := screen.PollEvent()
		switch ev := ev.(type) {
		case *tcell.EventKey:
			// Gestion des touches sp√©ciales - Tab avec v√©rification du portail
			if ev.Key() == tcell.KeyTab {
				gameState.SwitchWorld()
				gameState.Draw()
				continue
			}

			// Gestion des touches par caract√®re
			switch ev.Rune() {
			case 'q', 'Q':
				// Restaurer le terminal proprement
				screen.Fini()

				// Restaurer compl√®tement le terminal avec reset
				cmd := exec.Command("reset")
				cmd.Stdout = os.Stdout
				cmd.Stderr = os.Stderr
				cmd.Run()

				return

			case 'e', 'E':
				gameState.HandleInteractionKey()
				continue

			case 'i', 'I':
				gameState.ToggleInventory()
				gameState.Draw()
				continue

			case '1', '2', '3', '4', '5':
				itemIndex := int(ev.Rune() - '1')
				gameState.HandleShopPurchase(itemIndex)
				gameState.Draw()
				continue

			case ' ':
				gameState.HandleSpaceKey()
				continue

			case 'p', 'P':
				gameState.UnlockPortal()
				gameState.Draw()
				continue
			}

			// Gestion du mouvement
			if ev.Key() == tcell.KeyUp || ev.Key() == tcell.KeyDown ||
				ev.Key() == tcell.KeyLeft || ev.Key() == tcell.KeyRight {
				if gameState.MovePlayer(ev.Key()) {
					gameState.Draw()
					gameState.CheckInteraction()
				}
			}

		case *tcell.EventResize:
			screen.Sync()
<<<<<<< HEAD
			gameState.Draw()
=======
			draw()
		}
	}
}

func showIntro(screen tcell.Screen) {
	screen.Clear()

	// Texte de bienvenue
	intro := []string{
		` _______   ___       ________  ________  ________  ___  ________     `,
		`|\  ___ \ |\  \     |\   ___ \|\   __  \|\   __  \|\  \|\   __  \    `,
		`\ \   __/|\ \  \    \ \  \_|\ \ \  \|\  \ \  \|\  \ \  \ \  \|\  \   `,
		` \ \  \_|/_\ \  \    \ \  \ \\ \ \  \\\  \ \   _  _\ \  \ \   __  \  `,
		`  \ \  \_|\ \ \  \____\ \  \_\\ \ \  \\\  \ \  \\  \\ \  \ \  \ \  \ `,
		`   \ \_______\ \_______\ \_______\ \_______\ \__\\ _\\ \__\ \__\ \__\`,
		`    \|_______|\|_______|\|_______|\|_______|\|__|\|__|\|__|\|__|\|__|`,
		`                                                                     `,
		`                                                                     `,
		`                                                                     `,
		"üëã Bienvenue dans Eldoria !",
		"",
		"Plongez dans le village d'Ynovia afin de percer ses myst√®res.",
		"Partez √† la rencontre d'Emeryn, le guide du village, et √©coutez le afin d'en apprendre davantage sur cet endroit.",
		"Vous d√©couverirez s√ªrement que le village cache un portail qui m√®ne vers un autre monde... Mais m√©fiez-vous des monstres qui r√¥dent... et du boss Maximor !",
		"",
		"‚ö†Ô∏è Attention : Ce jeu est en version alpha. Certaines fonctionnalit√©s peuvent √™tre incompl√®tes ou instables.",
		"",
		"Commandes :",
		"D√©placez votre personnage avec les fl√®ches du clavier.",
		"Changez de monde avec [TAB].",
		"Quittez avec [q].",
		"",
		"Appuyez sur [x] pour commencer...",
		"",
	}

	// Centrer le texte
	w, h := screen.Size()
	for i, line := range intro {
		x := (w - len(line)) / 2
		y := h/2 - len(intro)/2 + i
		for j, r := range line {
			screen.SetContent(x+j, y, r, nil, tcell.StyleDefault)
		}
	}

	screen.Show()

	// Attendre l'appui sur "x"
	for {
		ev := screen.PollEvent()
		if key, ok := ev.(*tcell.EventKey); ok {
			if key.Rune() == 'x' || key.Rune() == 'X' {
				return
			}
>>>>>>> f8fb55b (Refactoring files)
		}
	}
}
