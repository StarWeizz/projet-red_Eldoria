package npcs

import (
	items "eldoria/items"
	createcharacter "eldoria/player"
	"fmt"
)

func CreateEmeryn() *NPC {
	emeryn := NewNPC(
		"Emeryn",
		"Centre du village",
		"Un guide sage qui accueille les nouveaux aventuriers et leur enseigne les bases de la survie.",
	)

	// Cr√©er la qu√™te d'introduction
	introQuest := Quest{
		ID:          "intro_quest",
		Title:       "Qu√™te d'introduction",
		Description: "Apprenez les bases de l'aventure et pr√©parez-vous pour votre premi√®re mission.",
		CurrentStep: 0,
		Completed:   false,
		Steps: []QuestStep{
			{
				ID:          1,
				Title:       "Trouver Emeryn au centre du village",
				Description: "Rendez-vous au centre du village pour rencontrer Emeryn.",
				Condition: func(player *createcharacter.Character) bool {
					// Cette condition sera toujours vraie une fois que le joueur interagit avec Emeryn
					return true
				},
				Reward: QuestReward{
					Money:  50,
					Weapon: items.WeaponList["Lame rouill√©"], // Premi√®re arme
					Items:  make(map[string]int),
				},
				Completed: false,
			},
			{
				ID:          2,
				Title:       "Tuer votre premier Azador",
				Description: "Combattez un Azador et r√©coltez de la pierre et des b√¢tons.",
				Condition: func(player *createcharacter.Character) bool {
					// V√©rifier si le joueur a de la pierre et des b√¢tons dans son inventaire
					hasStone := player.Inventory.HasItem("Pierre", 1)
					hasStick := player.Inventory.HasItem("B√¢ton", 1)
					return hasStone && hasStick
				},
				Reward: QuestReward{
					Money: 100,
					Items: make(map[string]int),
				},
				Completed: false,
			},
			{
				ID:          3,
				Title:       "Trouver Valenric le forgeron et crafter votre premi√®re arme",
				Description: "Apportez pierre et b√¢tons au forgeron pour cr√©er une arme am√©lior√©e.",
				Condition: func(player *createcharacter.Character) bool {
					// Cette condition sera g√©r√©e par le forgeron lui-m√™me
					// On peut v√©rifier si le joueur a une arme craft√©e sp√©cifique
					return player.Inventory.HasItem("√âp√©e en fer", 1) ||
						   player.Inventory.HasItem("Hache en fer", 1) ||
						   player.Inventory.HasItem("Arc en bois", 1)
				},
				Reward: QuestReward{
					Money: 150,
					Items: make(map[string]int),
				},
				Completed: false,
			},
		},
	}

	emeryn.AddQuest(introQuest)

	// Ajouter des dialogues contextuels
	emeryn.Dialogue["greeting"] = "Bienvenue, jeune aventurier ! Je suis Emeryn, votre guide dans ce monde dangereux."
	emeryn.Dialogue["quest_available"] = "J'ai une mission parfaite pour un d√©butant comme vous."
	emeryn.Dialogue["quest_in_progress"] = "Comment avancez-vous dans votre qu√™te ?"
	emeryn.Dialogue["quest_completed"] = "F√©licitations ! Vous √™tes maintenant pr√™t pour de plus grands d√©fis."

	return emeryn
}

// EmerynPhase indique la phase d'interaction actuelle avec Emeryn
var EmerynPhase int = 0
var EmerynInteractionStarted bool = false

func (npc *NPC) EmerynSpecialInteraction(player *createcharacter.Character) {
	// Ne rien faire ici, l'interaction sera g√©r√©e par GetEmerynMessage
}

func (npc *NPC) GetEmerynMessage(player *createcharacter.Character) string {
	// V√©rifier la qu√™te d'introduction
	for _, quest := range npc.Quests {
		if quest.ID == "intro_quest" && !quest.Completed {
			if quest.CurrentStep == 0 {
				if EmerynPhase == 0 {
					// Phase 1 : Message d'accueil personnalis√© selon la classe
					EmerynInteractionStarted = true
					return npc.GetWelcomeMessage(player) + "\n\nAppuyez sur [Espace] pour continuer."
				} else if EmerynPhase == 1 {
					// Phase 2 : Instructions apr√®s avoir re√ßu l'arme
					npc.ValidateQuestStep(player, "intro_quest")

					// Donner 20 XP pour avoir visit√© Emeryn
					expMessage := player.AddExperience(20)

					EmerynInteractionStarted = false // R√©initialiser apr√®s la qu√™te
					EmerynPhase = 2 // Marquer que la lame a √©t√© donn√©e

					message := "Je viens de te donner 1 lame rouill√©e.\n\nVa √† la sortie du village, tu trouveras un Azador, bats-le et ensuite va r√©colter des pierres et des b√¢tons puis trouve Valenric le forgeron."
					if expMessage != "" {
						message += "\n\n" + expMessage
					}
					return message
				}
			} else if quest.CurrentStep == 1 {
				// √âtape 2 : Tuer un Azador
				return "Trouve un Azador √† la sortie du village et r√©colte des mat√©riaux !"
			} else if quest.CurrentStep == 2 {
				// √âtape 3 : Voir le forgeron
				return "Va voir Valenric le forgeron avec tes mat√©riaux !"
			}
		}
	}

	// Si la qu√™te est termin√©e ou si on a d√©j√† donn√© la lame
	if EmerynPhase >= 2 {
		return "Bon voyage, aventurier ! N'oublie pas de voir Valenric le forgeron."
	}

	return "Bon voyage, aventurier !"
}

func (npc *NPC) GetWelcomeMessage(player *createcharacter.Character) string {
	baseMessage := "Bienvenue dans le village d'Eldoria, √©coute mes conseils.\n\n"

	switch player.Class {
	case "Guerrier":
		return baseMessage + "Jeune guerrier, tes avantages :\n‚Ä¢ Combat corps √† corps\n‚Ä¢ Haute r√©sistance\n‚Ä¢ Armes lourdes"
	case "Mage":
		return baseMessage + "Jeune mage, tes avantages :\n‚Ä¢ Ma√Ætrise magique\n‚Ä¢ Sorts puissants\n‚Ä¢ Intelligence √©lev√©e"
	case "Chasseur":
		return baseMessage + "Jeune chasseur, tes avantages :\n‚Ä¢ Combat √† distance\n‚Ä¢ Agilit√© √©lev√©e\n‚Ä¢ Pr√©cision redoutable"
	default:
		return baseMessage + "Jeune aventurier, pr√©pare-toi pour ton voyage."
	}
}

func (npc *NPC) AdvanceEmerynPhase() {
	// Ne faire avancer que si l'interaction a √©t√© d√©marr√©e avec E et qu'on n'a pas d√©j√† donn√© la lame
	if EmerynInteractionStarted && EmerynPhase < 2 {
		EmerynPhase++
	}
}

func (npc *NPC) CanAdvanceEmeryn() bool {
	// Peut avancer seulement si l'interaction est d√©marr√©e et qu'on n'a pas encore donn√© la lame
	return EmerynInteractionStarted && EmerynPhase < 2
}

func (npc *NPC) ExplainClasses(player *createcharacter.Character) {
	fmt.Printf("\n=== Explication des classes ===\n")
	fmt.Printf("üìö Laissez-moi vous expliquer les diff√©rentes classes d'aventuriers :\n\n")

	fmt.Printf("‚öîÔ∏è **Guerrier**\n")
	fmt.Printf("   ‚Ä¢ +3 Force, +2 Endurance, +1 Agilit√©\n")
	fmt.Printf("   ‚Ä¢ Sp√©cialis√© dans le combat au corps √† corps\n")
	fmt.Printf("   ‚Ä¢ Utilise √©p√©es, haches et armures lourdes\n\n")

	fmt.Printf("üèπ **Archer**\n")
	fmt.Printf("   ‚Ä¢ +3 Agilit√©, +2 Force, +1 Endurance\n")
	fmt.Printf("   ‚Ä¢ Expert en combat √† distance\n")
	fmt.Printf("   ‚Ä¢ Utilise arcs, fl√®ches et armures l√©g√®res\n\n")

	fmt.Printf("üîÆ **Mage**\n")
	fmt.Printf("   ‚Ä¢ +3 Intelligence, +2 Agilit√©, +1 Force\n")
	fmt.Printf("   ‚Ä¢ Ma√Ætre des sorts et de la magie\n")
	fmt.Printf("   ‚Ä¢ Utilise b√¢tons magiques et sorts puissants\n\n")

	fmt.Printf("Votre classe actuelle : %s\n", player.Class)
	fmt.Printf("Vos caract√©ristiques actuelles :\n")
	fmt.Printf("‚Ä¢ Niveau : %d\n", player.Level)
	fmt.Printf("‚Ä¢ HP : %d/%d\n", player.CurrentHP, player.MaxHP)
	fmt.Printf("‚Ä¢ Or : %d\n", player.Gold.Get())
}

func (npc *NPC) GetClassExplanation(player *createcharacter.Character) string {
	result := "\n=== Explication des classes ===\n"
	result += "üìö Laissez-moi vous expliquer les diff√©rentes classes d'aventuriers :\n\n"

	result += "‚öîÔ∏è **Guerrier**\n"
	result += "   ‚Ä¢ +3 Force, +2 Endurance, +1 Agilit√©\n"
	result += "   ‚Ä¢ Sp√©cialis√© dans le combat au corps √† corps\n"
	result += "   ‚Ä¢ Utilise √©p√©es, haches et armures lourdes\n\n"

	result += "üèπ **Archer**\n"
	result += "   ‚Ä¢ +3 Agilit√©, +2 Force, +1 Endurance\n"
	result += "   ‚Ä¢ Expert en combat √† distance\n"
	result += "   ‚Ä¢ Utilise arcs, fl√®ches et armures l√©g√®res\n\n"

	result += "üîÆ **Mage**\n"
	result += "   ‚Ä¢ +3 Intelligence, +2 Agilit√©, +1 Force\n"
	result += "   ‚Ä¢ Ma√Ætre des sorts et de la magie\n"
	result += "   ‚Ä¢ Utilise b√¢tons magiques et sorts puissants\n\n"

	result += fmt.Sprintf("Votre classe actuelle : %s\n", player.Class)
	result += "Vos caract√©ristiques actuelles :\n"
	result += fmt.Sprintf("‚Ä¢ Niveau : %d\n", player.Level)
	result += fmt.Sprintf("‚Ä¢ HP : %d/%d\n", player.CurrentHP, player.MaxHP)
	result += fmt.Sprintf("‚Ä¢ Or : %d\n", player.Gold.Get())

	return result
}